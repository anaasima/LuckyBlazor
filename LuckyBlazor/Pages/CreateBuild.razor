@page "/CreateBuild"
@using LuckyBlazor.Model
@using System.ComponentModel
@using LuckyBlazor.Authentication
@using Component = LuckyBlazor.Model.Component
@inject IComponentService ComponentService
@inject IBuildService BuildService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@* <div class="container-fluid"> *@
@*     <div class="row"></div> *@
@*     <div class="col-3"> *@
@*         <input type="radio" id="beginner" name="gender" value="beginner"> *@
@*         <label for="beginner">Beginner</label> *@
@*     </div> *@
@*     <div class="col-3"> *@
@*         <input type="radio" id="advanced" name="gender" value="advanced"> *@
@*         <label for="advanced">Advanced</label><br> *@
@*     </div> *@
@*     <div class="col-3"> *@
@*         <button @onclick="DisplayLevelOfSearch">See results</button> *@
@*     </div> *@
@* </div> *@
@* @if (display) *@
@* { *@
    <div class="container-fluid" id="tablesField">
        <div class="row">
            <div class="col-lg-12">
                <div class="selection">
                    <select id="select-programme" onchange="location = this.value;">
                        <option value="@defaultLink" selected>Types of components</option>
                        <option value=@linkToTable1>Motherboards</option>
                        <option value="@linkToTable2">CPUs</option>
                        <option value="@linkToTable3">GPUs</option>
                        <option value="@linkToTable4">RAMs</option>
                        <option value="@linkToTable5">Power supply</option>
                        <option value="@linkToTable6">Storage</option>
                    </select> <span></span>
                </div>

                <table id="x1">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in motherBoardsToShow)
                    {
                        <tr id="@variable.Id">
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddMotherboard(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <table id="x2">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in CPUsToShow)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddCPU(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>

                        </tr>
                    }
                    </tbody>
                </table>

                <table id="x3">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in GPUsToShow)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddGPU(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>

                        </tr>
                    }
                    </tbody>
                </table>

                <table id="x4">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in RAMsToShow)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddRAM(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <table id="x5">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in suppliesToShow)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddSupply(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <table id="x6">
                    <thead>
                    <tr class="head">
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                        <th>Add</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in storagesToShow)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>
                            <td>
                                <button class="forumButtons" @onclick="@(() => AddStorage(variable.Id))">
                                    <i class="oi oi-plus" style="color: black"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

                <button class="btn btn-primary" @onclick="FinishBuild">Finish build</button>
            </div>
        </div>
    </div>

    <div class="container-fluid" id="buildTable">
        <div class="row">
            <div class="col-lg-12">
                <p>Your build</p>
                <input type="text" placeholder="Post something..." @bind-value="_name"><br><br>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Release year</th>
                        <th>Brand</th>
                        <th>Additional information</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var variable in _myBuild)
                    {
                        <tr>
                            <td>@variable.Name</td>
                            <td>@variable.ReleaseYear</td>
                            <td>@variable.Brand</td>
                            <td>@variable.AdditionalInformation</td>

                        </tr>
                    }
                    </tbody>
                </table>
                <button class="btn btn-primary" @onclick="createBuild">Save build</button>
                <button class="btn btn-primary" @onclick="reset">Reset build</button>


            </div>
        </div>
    </div>
@* } *@
@* else if (!display) *@
@* { *@
@*     @foreach (var variable in _preBuilds) *@
@*     { *@
@*         <label> @variable.Name </label> *@
@* *@
@*         <table class="table"> *@
@*             <thead> *@
@*             <tr> *@
@*                 <th>Type</th> *@
@*                 <th>Brand</th> *@
@*                 <th>Name</th> *@
@*                 <th>Release Year</th> *@
@*                 <th>Aditional Information</th> *@
@*                 <th><button class="btn btn-primary" @onclick="@(() => addPreBuild(variable))"> *@
@*                     <i class="oi oi-plus"></i> *@
@*                 </button></th> *@
@*             </tr> *@
@*             </thead> *@
@* *@
@*             <tbody> *@
@* *@
@*             @for (int i = 0; i < variable.ComponentList.Count; i++) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@variable.ComponentList[i].Type</td> *@
@*                     <td>@variable.ComponentList[i].Brand</td> *@
@*                     <td>@variable.ComponentList[i].Name</td> *@
@*                     <td>@variable.ComponentList[i].ReleaseYear</td> *@
@*                     <td>@variable.ComponentList[i].AdditionalInformation</td> *@
@*                 </tr> *@
@*             } *@
@*             </tbody> *@
@*         </table> *@
@*     } *@
@* *@
@* } *@
@code {
    private IList<Component> _components = new List<Component>();
    private IList<Component> _myBuild = new List<Component>();
    private IList<Component> motherBoards = new List<Component>();
    private IList<Component> GPUs = new List<Component>();
    private IList<Component> CPUs = new List<Component>();
    private IList<Component> RAMs = new List<Component>();
    private IList<Component> supplies = new List<Component>();
    private IList<Component> storages = new List<Component>();
    private IList<Component> motherBoardsToShow = new List<Component>();
    private IList<Component> GPUsToShow = new List<Component>();
    private IList<Component> CPUsToShow = new List<Component>();
    private IList<Component> RAMsToShow = new List<Component>();
    private IList<Component> suppliesToShow = new List<Component>();
    private IList<Component> storagesToShow = new List<Component>();
    private IList<Build> _preBuilds = new List<Build>();
    private bool checkBeginner;
    private bool checkAdvanced;
    private bool display;//if it is true display advanced if it is false display beginner
    private string linkToTable1;
    private string linkToTable2;
    private string linkToTable3;
    private string linkToTable4;
    private string linkToTable5;
    private string linkToTable6;
    private string defaultLink;
    private bool mB = false;
    private bool gpuB = false;
    private bool cpuB = false;
    private bool ramB = false;
    private bool storageB = false;
    private bool supplyB = false;
    public Component motherboard = new Component();
    public Component gpu;
    public Component cpu;
    public Component ram;
    public Component powerSupply;
    public Component storage;
    private string _name;
    private Account _account = new Account();

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        linkToTable1 = $"CreateBuild#x1";
        linkToTable2 = $"CreateBuild#x2";
        linkToTable3 = $"CreateBuild#x3";
        linkToTable4 = $"CreateBuild#x4";
        linkToTable5 = $"CreateBuild#x5";
        linkToTable6 = $"CreateBuild#x6";
        defaultLink = $"CreateBuild";
        _components = await ComponentService.GetAllComponentsAsync();
        // _preBuilds = await BuildService.GetAllBuildsAsync(45); //TODO don't forget to check what is the actual admin id

        for (int i = 0; i < _components.Count; i++)
        {
            switch (_components[i].Type)
            {
                case "GPU":
                    GPUs.Add(_components[i]);
                    break;
                case "Motherboard":
                    motherBoards.Add(_components[i]);
                    break;
                case "CPU":
                    CPUs.Add(_components[i]);
                    break;
                case "RAM":
                    RAMs.Add(_components[i]);
                    break;
                case "Power supply":
                    supplies.Add(_components[i]);
                    break;
                case "Storage":
                    storages.Add(_components[i]);
                    break;
            }
        }
        GPUsToShow = GPUs;
        CPUsToShow = CPUs;
        motherBoardsToShow = motherBoards;
        RAMsToShow = RAMs;
        suppliesToShow = supplies;
        storagesToShow = storages;
    }

    public async Task DisplayLevelOfSearch()
    {
        await JsRuntime.InvokeVoidAsync("check", "beginner", checkBeginner);
        await JsRuntime.InvokeVoidAsync("check", "advanced", checkAdvanced);
        if (checkBeginner == true && checkAdvanced == false)
        {
            display = false;
        }
        else if (checkBeginner == false && checkAdvanced == true)
        {
            display = true;
        }
    }

    public void addPreBuild(Build build)
    {
        Build newBuild = new Build(build.ComponentList, _account.UserId, build.Name);
        BuildService.CreateBuild(newBuild);
    }
    public void createBuild()
    {
        Build newBuild = new Build(_myBuild, _account.UserId, _name);
        BuildService.CreateBuild(newBuild);
    }

    public async Task reset()
    {
        _myBuild = new List<Component>();
        await JsRuntime.InvokeVoidAsync("navigateBack");
    }

    //it should be a separate method for each because we need to make sure that a build does not end up havin gtwo motherboards or two power supplies UGHHHHH
    public async Task AddMotherboard(int id)
    {
        foreach (var VARIABLE in motherBoardsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!mB)
                {
                    motherboard = VARIABLE;
                    await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));
                    _myBuild.Add(motherboard);
                }

                if (mB)
                {
                    _myBuild.Remove(motherboard);
                    motherboard = VARIABLE;
                    _myBuild.Add(motherboard);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                mB = true;
                return;
            }
        }
    }

    public async Task AddCPU(int id)
    {
        foreach (var VARIABLE in CPUsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!cpuB)
                {
                    cpu = VARIABLE;
                    _myBuild.Add(cpu);
                }
                if (cpuB)
                {
                    _myBuild.Remove(cpu);
                    cpu = VARIABLE;
                    _myBuild.Add(cpu);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                cpuB = true;
                return;
            }
        }
    }

    public async Task AddGPU(int id)
    {
        foreach (var VARIABLE in GPUsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!gpuB)
                {
                    gpu = VARIABLE;
                    _myBuild.Add(gpu);
                }
                if (gpuB)
                {
                    _myBuild.Remove(gpu);
                    gpu = VARIABLE;
                    _myBuild.Add(gpu);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                gpuB = true;
                return;
            }
        }
    }

    public async Task AddRAM(int id)
    {
        foreach (var VARIABLE in RAMsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!ramB)
                {
                    ram = VARIABLE;
                    _myBuild.Add(ram);
                }
                if (ramB)
                {
                    _myBuild.Remove(ram);
                    ram = VARIABLE;
                    _myBuild.Add(ram);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                ramB = true;
                return;
            }
        }
    }

    public async Task AddStorage(int id)
    {
        foreach (var VARIABLE in storagesToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!storageB)
                {
                    storage = VARIABLE;
                    _myBuild.Add(storage);
                }

                if (storageB)
                {
                    _myBuild.Remove(storage);
                    storage = VARIABLE;
                    _myBuild.Add(storage);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                storageB = true;
                return;
            }
        }
    }

    public async Task AddSupply(int id)
    {
        foreach (var VARIABLE in suppliesToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!supplyB)
                {
                    powerSupply = VARIABLE;
                    _myBuild.Add(powerSupply);
                }

                if (supplyB)
                {
                    _myBuild.Remove(powerSupply);
                    powerSupply = VARIABLE;
                    _myBuild.Add(powerSupply);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", string.Concat(id));

                Sort(VARIABLE);
                supplyB = true;
                return;
            }
        }
    }


    public async Task FinishBuild()
    {
        int sum = 0;
        foreach (var VARIABLE in _myBuild)
        {
            sum += VARIABLE.EnergyConsumption;
        }
        if (sum > powerSupply.EnergyConsumption)
            await JsRuntime.InvokeVoidAsync("sendAlert");
        await JsRuntime.InvokeVoidAsync("show");
    }

    private void Sort(Component component)
    {
        motherBoardsToShow = new List<Component>();
        CPUsToShow = new List<Component>();
        GPUsToShow = new List<Component>();
        RAMsToShow = new List<Component>();
        suppliesToShow = new List<Component>();
        storagesToShow = new List<Component>();
        
        string typeOfComponent = component.SocketType;
        
        foreach (var motherBoard in motherBoards.ToList())
        {
            if (motherBoard.SocketType.Contains(typeOfComponent))
            {
                Console.WriteLine("1");
                motherBoardsToShow.Add(motherBoard);
            }
        }
        
        foreach (var GPU in GPUs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(GPU.SocketType))
                {
                    Console.WriteLine("1.1");
                    GPUsToShow.Add(GPU);
                }
            }
        }
        
        foreach (var RAM in RAMs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(RAM.SocketType))
                {
                    Console.WriteLine("2");
                    RAMsToShow.Add(RAM);
                }
            }
        }
        
        foreach (var storage in storages.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(storage.SocketType))
                {
                    Console.WriteLine("3");
                    storagesToShow.Add(storage);
                }
            }
        }
        
        foreach (var CPU in CPUs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(CPU.SocketType))
                {
                    Console.WriteLine("4");
                    CPUsToShow.Add(CPU);
                }
            }
        }
        foreach (var supply in supplies.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(supply.SocketType))
                {
                    Console.WriteLine("5");
                    suppliesToShow.Add(supply);
                }
            }
        }
    }

}