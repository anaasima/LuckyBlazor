@page "/Forum"
@inject IForumService ForumService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@using LuckyBlazor.Model.Forum
@using LuckyBlazor.Data.ForumService
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Model.Forum.Report
@using LuckyBlazor.Model.Rating
@using System.Diagnostics.Eventing.Reader
<div class="container-fluid">
    <AuthorizeView>
    <div class="row" id="allignMain">
        <div class="col-11 d-flex justify-content-center">
            <input id="postContent" type="text" placeholder="Post something..." @bind-value="_postContent">
        </div>
        <div class="col-1 d-flex justify-content-center align-items-center">
            <button class="buttons" @onclick="postOnForum">Post</button>
        </div>
    </div>
    </AuthorizeView>
    <div class="row">
        <div class="col-9">
            @foreach (var variable in _posts)
            {
                <div class="forumForm">
                    <div class="row">

                        <div class="col-9">

                            <a href="" @onclick="@(() => GoToUserProfile(@variable.Username))">@String.Concat("@")@variable.Username</a>
                            <AuthorizeView>
                                <button class="forumButtons" id="background" @onclick="@(() => reportPost(variable.PostId))">
                                    <i class="oi oi-warning" style="color: #555555"></i>
                                </button>
                                <button class="forumButtons" id="background" @onclick="@(() => savePost(variable))">
                                    <i class="oi oi-data-transfer-download" style="color: #555555"></i>
                                </button>
                            </AuthorizeView>
                            <AuthorizeView Policy="Moderator">
                                <button class="forumButtons" id="background" @onclick="@(() => deletePost(variable.PostId))">
                                    <i class="oi oi-trash" style="color: #555555"></i>
                                </button>
                            </AuthorizeView>
                        </div>
                    </div>
                    <div class="row comments">
                        <div class="col-12" style="text-align: justify">
                            <p>@variable.Content</p>
                        </div>
                    </div>
                    <div class="row">
                        <AuthorizeView>
                            <div class="1-col">
                                <button class="forumButtons margin" id="background" @onclick="@(() => like(variable.PostId))"><i class="oi oi-thumb-up" style="color: #555555"></i></button>
                                <button class="forumButtons margin" id="background" @onclick="@(() => dislike(variable.PostId))"><i class="oi oi-thumb-down" style="color: #555555"></i></button>
                            </div>
                        </AuthorizeView>
                        <div class="2-col">
                            <div class="col-3">
                                <label>@getLikes(variable.PostId)likes</label>
                            </div>
                        </div>
                    </div>
                    <div class="row" id="seeComments">
                        <div class="col-4">
                            <a href="" @onclick="@(() => GoToPostPage(variable.PostId))">See comments</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (followedAccounts == null || !followedAccounts.Any())
        {
            <p>You don't follow any account</p>
        }
        else
        {
            <div class="col-3 justify-content-end">
                <table class="table" style="text-align: center">
                    <tbody>
                    @foreach (var variable in followedAccounts)
                    {
                        <tr>
                            <th scope="row">@variable.Name</th>
                            <th scope="row"><a href="" @onclick="@(() => GoToUserProfile(@variable.Username))">@String.Concat("@")@variable.Username</a></th>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private IList<Post> _posts = new List<Post>();
    private string _postContent;
    private Account _account = new Account();
    private IList<Account> followedAccounts = new List<Account>();
    private IList<RatingPost> _rating = new List<RatingPost>();
    private int _likes=0;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _posts = await ForumService.GetAllPosts();
        if (_account != null)
        {
            followedAccounts = await AccountService.GetFollowedAccounts(_account.UserId);
        }
        foreach (var VARIABLE in _posts)
        {
            Console.WriteLine(VARIABLE);
        }
        
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
    // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
    private void GoToUserProfile(string username)
    {
        NavigationManager.NavigateTo("/UserProfile/" + username);
    }

    private async Task postOnForum()
    {
        Post post = new Post(_postContent, _account.UserId);
        await ForumService.CreatePost(post);
        _postContent = "";
    }

    private void GoToPostPage(int postId)
    {
        Id = String.Concat(postId);
        NavigationManager.NavigateTo("/PostPage/" + Id);
    }

    private async Task reportPost(int postId)
    {
        Report newReport = new Report(_account.UserId, postId);
        await ForumService.ReportPost(newReport);
    }

    private async Task savePost(Post post)
    {
        await ForumService.SavePosts(post, _account.UserId);
    }

    private async Task deletePost(int postId )
    {
        await ForumService.DeletePost(postId);
    }

    private async Task like(int postId)
    {
        RatingPost ratingPost = new RatingPost(_account.UserId, postId, 1);
        await ForumService.RatePost(ratingPost);
    }

    private async Task dislike(int postId)
    {
        RatingPost ratingPost = new RatingPost(_account.UserId, postId, -1);
        await ForumService.RatePost(ratingPost);
    }
    private int getLikes(int postId)
    {
        int sum = 0;
        foreach (var VARIABLE in _posts)
        {
            if (VARIABLE.PostId == postId)
            {
                _rating = VARIABLE.RatingPosts;
                foreach (var variable in _rating)
                {
                    sum += variable.score;
                }
            }
        }
        _likes = sum;
        return _likes;
    }
}