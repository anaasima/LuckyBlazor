@page "/MyBuilds"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Data.ForumService
@using LuckyBlazor.Model.Forum
@inject IBuildService BuildService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IForumService ForumService
<div class="container-fluid">
@foreach (var variable in _builds)
{
    <div class="row">
        <div class="col-1">
            <h4>
                <label> @variable.Name </label>
            </h4>
        </div>
            <div class="col-1">
            <button class="forumButtons" @onclick="@(() => NavigateToEdit(String.Concat(@variable.Id)))">
                <i class="oi oi-wrench" style="color: #555555"></i>
            </button>
                <button class="forumButtons" @onclick="@(() => DeleteBuild(@variable.Id))">
                    <i class="oi oi-trash" style="color: #555555"></i>
                </button>
                <button class="forumButtons" @onclick="@(() => PostBuild(@variable))">
                    <i class="oi oi-data-transfer-upload" style="color: #555555"></i>
                </button>
        </div>
    </div>
    <table class="table styledTable">
        <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Brand</th>
            <th>Release Year</th>
            <th>Aditional Information</th>
        </tr>
        </thead>

        <tbody>
        @for (int i = 0; i < variable.ComponentList.Count; i++)
        {
            <tr>
                <td>@variable.ComponentList[i].Name</td>
                <td>@variable.ComponentList[i].Type</td>
                <td>@variable.ComponentList[i].Brand</td>
                <td>@variable.ComponentList[i].ReleaseYear</td>
                <td>@variable.ComponentList[i].AdditionalInformation</td>

            </tr>
        }
        </tbody>
    </table>
}
</div>

@code {
    private IList<Build> _builds = new List<Build>();
    private Account _account = new Account();

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _builds = await BuildService.GetAllBuildsAsync(_account.UserId);
    }

    public void DeleteBuild(int id)
    {
        Build build = new Build();
        for (int i = 0; i < _builds.Count; i++)
        {
            if (_builds[i].Id == id)
                build = _builds[i];
        }
        BuildService.DeleteBuild(id);
        _builds.Remove(build);
    }

    private void NavigateToEdit(string id)
    {
        Id = id;
        NavigationManager.NavigateTo("/EditBuild/" + String.Concat(id));
    }

    private async Task PostBuild(Build build)
    {
        Post post = new Post(build.ToString(), _account.UserId);
        await ForumService.CreatePost(post);
    }
}