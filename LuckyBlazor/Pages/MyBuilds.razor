@page "/MyBuilds"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@inject IBuildService BuildService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>MyBuilds</h3>

 @foreach (var variable in _builds)
 {
     <label> @variable.Name </label>

     <table class="table">
         <thead>
         <tr>
             <th>Type</th>
             <th>Brand</th>
             <th>Name</th>
             <th>Release Year</th>
             <th>Aditional Information</th>
         </tr>
         </thead>

         <tbody>

         @for (int i = 0; i < variable.ComponentList.Count; i++)
         {
             <tr>
                 <td>@variable.ComponentList[i].Type</td>
                 <td>@variable.ComponentList[i].Brand</td>
                 <td>@variable.ComponentList[i].Name</td>
                 <td>@variable.ComponentList[i].ReleaseYear</td>
                 <td>@variable.ComponentList[i].AdditionalInformation</td>
                 <button @onclick="@(() => DeleteBuild(variable.Id))">
                     <i class="oi oi-trash" style="color: pink"/>
                 </button>
                 <button @onclick="@(() => NavigateToEdit(@variable.Id))">
                     <i class="oi oi-eye" style="color: darkblue"></i>
                 </button>
                 <button @onclick="@(() => DeleteBuild(variable.Id))">
                     <i class="oi oi-delete" style="color: yellow"></i>
                 </button>
             </tr>
         }
         </tbody>
     </table>
 }

@code {
    private IList<Build> _builds = new List<Build>();
    private Account _account = new Account();

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _builds = await BuildService.GetAllBuildsAsync(_account.UserId);
        // for (int i = 0; i < _builds.Count; i++)
        // {
        //     _builds.Add(_builds[i]);
        // }
    }

    public void DeleteBuild(int id)
    {
        Build build = new Build();
        for (int i = 0; i < _builds.Count; i++)
        {
            if (_builds[i].Id == id)
                build = _builds[i];
        }
        BuildService.DeleteBuild(id);
        _builds.Remove(build);
    }

    public void NavigateToEdit(int id)
    {
        Id = String.Concat(id);
        NavigationManager.NavigateTo("/EditBuild/" + Id);
    }

}
