@page "/EditBuild/{Id}"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h3>EditBuild</h3>

<div class="container-fluid" id="tablesField">
    <div class="row">
        <div class="col-lg-12">
            <div class="selection">
                <select id="select-programme" onchange="location = this.value;">
                    <option value="@_defaultLink" selected>Types of components</option>
                    <option value=@_linkToTable1>Motherboards</option>
                    <option value="@_linkToTable2">CPUs</option>
                    <option value="@_linkToTable3">GPUs</option>
                    <option value="@_linkToTable4">RAMs</option>
                    <option value="@_linkToTable5">Power supply</option>
                    <option value="@_linkToTable6">Storage</option>
                </select> <span></span>
            </div>

            <table class="styledTable" id="x1">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _motherBoardsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button id="rateBut" @onclick="@(() => AddMotherboard(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table class="styledTable" id="x2">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _CPUsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button  id="rateBut" @onclick="@(() => AddCPU(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>

            <table class="styledTable" id="x3">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _GPUsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button  id="rateBut" @onclick="@(() => AddGPU(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>

            <table class="styledTable" id="x4">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _RAMsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                             <button  id="rateBut" @onclick="@(() => AddRAM(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table class="styledTable" id="x5">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _suppliesToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                              <button  id="rateBut" @onclick="@(() => AddSupply(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table class="styledTable" id="x6">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _storagesToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button  id="rateBut" @onclick="@(() => AddStorage(variable.Id))">
                                                        <i class="oi oi-plus" style="color: white"></i>
                                                    </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

             <button class="btn btn-primary myPageButtons" style="margin-right: 10px" @onclick="FinishBuild">Finish</button>
        </div>
    </div>
</div>

<div class="container-fluid" id="buildTable">
    <div class="row">
        <div class="col-lg-12">
            <p>Your build</p>
            <input type="text" placeholder="Post something..." @bind-value="_name"><br><br>
            <table class="table styledTable">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _myBuild)
                {
                    <tr>
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>

                    </tr>
                }
                </tbody>
            </table>
          <button class="myPageButtons" @onclick="CreateBuild">Save build</button>
                         <button class="myPageButtons" @onclick="Reset">Reset build</button>


        </div>
    </div>
</div>

@code {
    private IList<Component> _components = new List<Component>();
    private IList<Component> _myBuild = new List<Component>();
    private IList<Component> _motherBoards = new List<Component>();
    private IList<Component> _GPUs = new List<Component>();
    private IList<Component> _CPUs = new List<Component>();
    private IList<Component> _RAMs = new List<Component>();
    private IList<Component> _supplies = new List<Component>();
    private IList<Component> _storages = new List<Component>();
    private IList<Component> _motherBoardsToShow = new List<Component>();
    private IList<Component> _GPUsToShow = new List<Component>();
    private IList<Component> _CPUsToShow = new List<Component>();
    private IList<Component> _RAMsToShow = new List<Component>();
    private IList<Component> _suppliesToShow = new List<Component>();
    private IList<Component> _storagesToShow = new List<Component>();
    private string _linkToTable1;
    private string _linkToTable2;
    private string _linkToTable3;
    private string _linkToTable4;
    private string _linkToTable5;
    private string _linkToTable6;
    private string _defaultLink;
    private bool _mB;
    private bool _sort = true;
    private bool _gpuB;
    private bool _cpuB;
    private bool _ramB;
    private bool _storageB;
    private bool _supplyB;
    public Component _motherboard = new Component();
    public Component _gpu;
    public Component _cpu;
    public Component _ram;
    public Component _powerSupply;
    public Component _storage;
    private string _name;
    private Account _account = new Account();
    private IList<Build> _allBuilds = new List<Build>();
    private Build _build = new Build();
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _linkToTable1 = $"EditBuild/{Id}#x1";
        _linkToTable2 = $"EditBuild/{Id}#x2";
        _linkToTable3 = $"EditBuild/{Id}#x3";
        _linkToTable4 = $"EditBuild/{Id}#x4";
        _linkToTable5 = $"EditBuild/{Id}#x5";
        _linkToTable6 = $"EditBuild/{Id}#x6";
        _defaultLink = $"EditBuild/{Id}";
        _components = await ComponentService.GetAllComponentsAsync();
        _allBuilds = await BuildService.GetAllBuildsAsync(_account.UserId);

        foreach (var VARIABLE in _allBuilds)
        {
            if (VARIABLE.Id == Int32.Parse(Id))
            {
                _build = VARIABLE;
                Console.WriteLine(_build.ComponentList);
            }
        }

       
        
        _name = _build.Name;
        for (int i = 0; i < _components.Count; i++)
        {
            switch (_components[i].Type)
            {
                case "GPU":
                    _GPUs.Add(_components[i]);
                    break;
                case "Motherboard":
                    _motherBoards.Add(_components[i]);
                    break;
                case "CPU":
                    _CPUs.Add(_components[i]);
                    break;
                case "RAM":
                    _RAMs.Add(_components[i]);
                    break;
                case "Power supply":
                    _supplies.Add(_components[i]);
                    break;
                case "Storage":
                    _storages.Add(_components[i]);
                    break;
            }
        }
        
        _GPUsToShow = _GPUs;
        foreach (var VARIABLE in _GPUsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA11 " + VARIABLE.Id);
                    _gpu = VARIABLE;
                }
            }
        }
        
        _GPUsToShow = _GPUs;
        _CPUsToShow = _CPUs;
        foreach (var VARIABLE in _CPUsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    _cpu = VARIABLE;
                    _myBuild.Add(_cpu);
                }
            }
        }
        _motherBoardsToShow = _motherBoards;
        foreach (var VARIABLE in _motherBoardsToShow)
        {
            Console.WriteLine("AAAAAAAAAAA");
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA" + VARIABLE.Id);
                    _motherboard = VARIABLE;
                    _myBuild.Add(_motherboard);
                }
            }
        }
        _RAMsToShow = _RAMs;
        foreach (var VARIABLE in _RAMsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    _ram = VARIABLE;
                    _myBuild.Add(_ram);
                }
            }
        }
        _suppliesToShow = _supplies;
        foreach (var VARIABLE in _suppliesToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    _powerSupply = VARIABLE;
                    Console.WriteLine("ddddd" + _powerSupply.Name);
                    _myBuild.Add(_powerSupply);
                }
            }
        }
        _storagesToShow = _storages;
        foreach (var VARIABLE in _storagesToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    _storage = VARIABLE;
                    Console.WriteLine(_storage.Name + "fgerrfggf");
                    _myBuild.Add(_storage);
                }
            }
        }
    }
   
     private async Task CreateBuild()
     {
         _build.Name = _name;
         _build.ComponentList = _myBuild;
         await BuildService.EditBuild(_build);
     }

    private async Task Reset()
    {
       NavigationManager.NavigateTo("/MyPage");
    }

     private async Task AddMotherboard(int id)
    {
        foreach (var VARIABLE in _motherBoardsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!_mB)
                {
                    _motherboard = VARIABLE;
                    _myBuild.Add(_motherboard);
                    await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                }

                if (_mB)
                {
                    _myBuild.Remove(_motherboard);
                    _motherboard = VARIABLE;
                    _myBuild.Add(_motherboard);
                   await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                }

                Sort(VARIABLE);
                _mB = true;
                return;
            }
        }
    }

    public async Task AddCPU(int id)
    {
        if (_motherboard != null)
        {
            foreach (var VARIABLE in _CPUsToShow)
            {
                if (VARIABLE.Id == id)
                {
                    if (!_cpuB)
                    {
                        _cpu = VARIABLE;
                        _myBuild.Add(_cpu);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }
                    if (_cpuB)
                    {
                        _myBuild.Remove(_cpu);
                        _cpu = VARIABLE;
                        _myBuild.Add(_cpu);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    Sort(VARIABLE);
                    _cpuB = true;
                }
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("sendMotherboardAlert");
        }
    }

    public async Task AddGPU(int id)
    {
        if (_motherboard != null)
        {
            foreach (var VARIABLE in _GPUsToShow)
            {
                if (VARIABLE.Id == id)
                {
                    if (!_gpuB)
                    {
                        _gpu = VARIABLE;
                        _myBuild.Add(_gpu);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }
                    if (_gpuB)
                    {
                        _myBuild.Remove(_gpu);
                        _gpu = VARIABLE;
                        _myBuild.Add(_gpu);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    Sort(VARIABLE);
                    _gpuB = true;
                    return;
                }
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("sendMotherboardAlert");
        }
    }

    public async Task AddRAM(int id)
    {
        if (_motherboard != null)
        {
            foreach (var VARIABLE in _RAMsToShow)
            {
                if (VARIABLE.Id == id)
                {
                    if (!_ramB)
                    {
                        _ram = VARIABLE;
                        _myBuild.Add(_ram);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }
                    if (_ramB)
                    {
                        _myBuild.Remove(_ram);
                        _ram = VARIABLE;
                        _myBuild.Add(_ram);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    Sort(VARIABLE);
                    _ramB = true;
                    return;
                }
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("sendMotherboardAlert");
        }
    }

    public async Task AddStorage(int id)
    {
        if (_motherboard != null)
        {
            foreach (var VARIABLE in _storagesToShow)
            {
                if (VARIABLE.Id == id)
                {
                    if (!_storageB)
                    {
                        _storage = VARIABLE;
                        _myBuild.Add(_storage);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    if (_storageB)
                    {
                        _myBuild.Remove(_storage);
                        _storage = VARIABLE;
                        _myBuild.Add(_storage);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    Sort(VARIABLE);
                    _storageB = true;
                    return;
                }
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("sendMotherboardAlert");
        }
    }

    private async Task AddSupply(int id)
    {
        if (_motherboard != null)
        {
            foreach (var VARIABLE in _suppliesToShow)
            {
                if (VARIABLE.Id == id)
                {
                    if (!_supplyB)
                    {
                        _powerSupply = VARIABLE;
                        _myBuild.Add(_powerSupply);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    if (_supplyB)
                    {
                        _myBuild.Remove(_powerSupply);
                        _powerSupply = VARIABLE;
                        _myBuild.Add(_powerSupply);
                        await JsRuntime.InvokeVoidAsync("chosenComponent", VARIABLE.Name);
                    }

                    Sort(VARIABLE);
                    _supplyB = true;
                    return;
                }
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("sendMotherboardAlert");
        }
    }

    private async Task FinishBuild()
    {
        if (_motherboard != null && _cpu != null && _gpu != null && _ram != null && _storage != null && _powerSupply != null)
        {
            int sum = 0;
            foreach (var VARIABLE in _myBuild)
            {
                sum += VARIABLE.EnergyConsumption;
            }
            if (sum > _powerSupply.EnergyConsumption)
                await JsRuntime.InvokeVoidAsync("sendAlert");
            await JsRuntime.InvokeVoidAsync("show");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("allComponents");
        }
    }
    
    private void Sort(Component component)
    {
         if (_sort)
        {
            _motherBoardsToShow = new List<Component>();
            _CPUsToShow = new List<Component>();
            _GPUsToShow = new List<Component>();
            _RAMsToShow = new List<Component>();
            _suppliesToShow = new List<Component>();
            _storagesToShow = new List<Component>();

            string typeOfComponent = component.SocketType;


            foreach (var motherBoard in _motherBoards.ToList())
            {
                if (motherBoard.SocketType.Contains(typeOfComponent))
                {
                    if (!_motherBoardsToShow.Contains(motherBoard))
                        _motherBoardsToShow.Add(motherBoard);
                }
            }

            foreach (var GPU in _GPUs.ToList())
            {
                foreach (var motherBoard in _motherBoardsToShow)
                {
                    if (motherBoard.SocketType.Contains(GPU.SocketType))
                    {
                        if (!_GPUsToShow.Contains(GPU))
                            _GPUsToShow.Add(GPU);
                    }
                }
            }

            foreach (var RAM in _RAMs.ToList())
            {
                foreach (var motherBoard in _motherBoardsToShow)
                {
                    if (motherBoard.SocketType.Contains(RAM.SocketType))
                    {
                        if (!_RAMsToShow.Contains(RAM))
                            _RAMsToShow.Add(RAM);
                    }
                }
            }

            foreach (var storage in _storages.ToList())
            {
                foreach (var motherBoard in _motherBoardsToShow)
                {
                    if (motherBoard.SocketType.Contains(storage.SocketType))
                    {
                        if (!_storagesToShow.Contains(storage))
                            _storagesToShow.Add(storage);
                    }
                }
            }

            foreach (var CPU in _CPUs.ToList())
            {
                foreach (var motherBoard in _motherBoardsToShow)
                {
                    if (motherBoard.SocketType.Contains(CPU.SocketType))
                    {
                        if (!_CPUsToShow.Contains(CPU))
                            _CPUsToShow.Add(CPU);
                    }
                }
            }
            foreach (var supply in _supplies.ToList())
            {
                foreach (var motherBoard in _motherBoardsToShow)
                {
                    if (motherBoard.SocketType.Contains(supply.SocketType))
                    {
                        if (!_suppliesToShow.Contains(supply))
                            _suppliesToShow.Add(supply);
                    }
                }
            }
            _sort = false;
        }
     }


}