@page "/EditBuild/{Id}"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h3>EditBuild</h3>

<div class="container-fluid" id="tablesField">
    <div class="row">
        <div class="col-lg-12">
            <div class="selection">
                <select id="select-programme" onchange="location = this.value;">
                    <option value="@defaultLink" selected>Types of components</option>
                    <option value=@linkToTable1>Motherboards</option>
                    <option value="@linkToTable2">CPUs</option>
                    <option value="@linkToTable3">GPUs</option>
                    <option value="@linkToTable4">RAMs</option>
                    <option value="@linkToTable5">Power supply</option>
                    <option value="@linkToTable6">Storage</option>
                </select> <span></span>
            </div>

            <table id="x1">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in motherBoardsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddMotherboard(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table id="x2">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in CPUsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddCPU(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>

            <table id="x3">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in GPUsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddGPU(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>

                    </tr>
                }
                </tbody>
            </table>

            <table id="x4">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in RAMsToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddRAM(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table id="x5">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in suppliesToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddSupply(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <table id="x6">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                    <th>Add</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in storagesToShow)
                {
                    <tr id="@variable.Id">
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>
                        <td>
                            <button @onclick="@(() => AddStorage(variable.Id))">
                                <i class="oi oi-plus" style="color: pink"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            <button class="btn btn-primary" @onclick="FinishBuild">Finish build</button>
        </div>
    </div>
</div>

<div class="container-fluid" id="buildTable">
    <div class="row">
        <div class="col-lg-12">
            <p>Your build</p>
            <input type="text" placeholder="Post something..." @bind-value="_name"><br><br>
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Release year</th>
                    <th>Brand</th>
                    <th>Additional information</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var variable in _myBuild)
                {
                    <tr>
                        <td>@variable.Name</td>
                        <td>@variable.ReleaseYear</td>
                        <td>@variable.Brand</td>
                        <td>@variable.AdditionalInformation</td>

                    </tr>
                }
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="createBuild">Save build</button>
            <button class="btn btn-primary" @onclick="reset">Reset build</button>


        </div>
    </div>
</div>

@code {
    private IList<Component> _components = new List<Component>();
    private IList<Component> _myBuild = new List<Component>();
    private IList<Component> _motherBoards = new List<Component>();
    private IList<Component> GPUs = new List<Component>();
    private IList<Component> CPUs = new List<Component>();
    private IList<Component> RAMs = new List<Component>();
    private IList<Component> supplies = new List<Component>();
    private IList<Component> storages = new List<Component>();
    private IList<Component> motherBoardsToShow = new List<Component>();
    private IList<Component> GPUsToShow = new List<Component>();
    private IList<Component> CPUsToShow = new List<Component>();
    private IList<Component> RAMsToShow = new List<Component>();
    private IList<Component> suppliesToShow = new List<Component>();
    private IList<Component> storagesToShow = new List<Component>();
    private string linkToTable1;
    private string linkToTable2;
    private string linkToTable3;
    private string linkToTable4;
    private string linkToTable5;
    private string linkToTable6;
    private string defaultLink;
    private bool mB;
    private bool gpuB;
    private bool cpuB;
    private bool ramB;
    private bool storageB;
    private bool supplyB;
    public Component motherboard = new Component();
    public Component gpu;
    public Component cpu;
    public Component ram;
    public Component powerSupply;
    public Component storage;
    private string _name;
    private Account _account = new Account();
    private IList<Build> _allBuilds = new List<Build>();
    private Build _build = new Build();
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        linkToTable1 = $"EditBuild/{Id}#x1";
        linkToTable2 = $"EditBuild/{Id}#x2";
        linkToTable3 = $"EditBuild/{Id}#x3";
        linkToTable4 = $"EditBuild/{Id}#x4";
        linkToTable5 = $"EditBuild/{Id}#x5";
        linkToTable6 = $"EditBuild/{Id}#x6";
        defaultLink = $"EditBuild/{Id}";
        _components = await ComponentService.GetAllComponentsAsync();
        _allBuilds = await BuildService.GetAllBuildsAsync(_account.UserId);

        foreach (var VARIABLE in _allBuilds)
        {
            if (VARIABLE.Id == Int32.Parse(Id))
            {
                _build = VARIABLE;
                Console.WriteLine(_build.ComponentList);
            }
        }

       
        
        _name = _build.Name;
        for (int i = 0; i < _components.Count; i++)
        {
            switch (_components[i].Type)
            {
                case "GPU":
                    GPUs.Add(_components[i]);
                    break;
                case "Motherboard":
                    _motherBoards.Add(_components[i]);
                    break;
                case "CPU":
                    CPUs.Add(_components[i]);
                    break;
                case "RAM":
                    RAMs.Add(_components[i]);
                    break;
                case "Power supply":
                    supplies.Add(_components[i]);
                    break;
                case "Storage":
                    storages.Add(_components[i]);
                    break;
            }
        }
        
        GPUsToShow = GPUs;
        foreach (var VARIABLE in GPUsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA11 " + VARIABLE.Id);
                    gpu = VARIABLE;
                }
            }
        }
        
        GPUsToShow = GPUs;
        CPUsToShow = CPUs;
        foreach (var VARIABLE in CPUsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    cpu = VARIABLE;
                }
            }
        }
        motherBoardsToShow = _motherBoards;
        foreach (var VARIABLE in motherBoardsToShow)
        {
            Console.WriteLine("AAAAAAAAAAA");
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA" + VARIABLE.Id);
                    motherboard = VARIABLE;
                }
            }
        }
        RAMsToShow = RAMs;
        foreach (var VARIABLE in RAMsToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    ram = VARIABLE;
                }
            }
        }
        suppliesToShow = supplies;
        foreach (var VARIABLE in suppliesToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    powerSupply = VARIABLE;
                }
            }
        }
        storagesToShow = storages;
        foreach (var VARIABLE in storagesToShow)
        {
            for (int i = 0; i < _build.ComponentList.Count; i++)
            {
                if (_build.ComponentList[i].Id == (VARIABLE).Id)
                {
                    Console.WriteLine("DSA");
                    storage = VARIABLE;
                    Console.WriteLine(storage.Name + "fgerrfggf");
                }
            }
        }
        // await this.OnAfterRenderAsync(true);
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         foreach (var VARIABLE in GPUsToShow)
    //         {
    //             for (int i = 0; i < _build.ComponentList.Count; i++)
    //             {
    //                 if (_build.ComponentList[i].Id == (VARIABLE).Id)
    //                 {
    //                     Console.WriteLine("DSA11 " + VARIABLE.Id);
    //                     gpu = VARIABLE;
    //                     await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(VARIABLE.Id));
    //                 }
    //             }
    //         }
    //     }
    // }
     public void createBuild()
     {
         _build.Name = _name;
         _build.ComponentList = _myBuild;
         BuildService.EditBuild(_build);
     }

    public async Task reset()
    {
       NavigationManager.NavigateTo("/MyPage");
    }

    //it should be a separate method for each because we need to make sure that a build does not end up havin gtwo motherboards or two power supplies UGHHHHH
public async Task AddMotherboard(int id)
    {
        foreach (var VARIABLE in motherBoardsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!mB)
                {
                    motherboard = VARIABLE;
                    _myBuild.Add(motherboard);
                }

                if (mB)
                {
                    _myBuild.Remove(motherboard);
                    motherboard = VARIABLE;
                    _myBuild.Add(motherboard);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));
                Sort(VARIABLE);
                mB = true;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
    }

    public async Task AddCPU(int id)
    {
        foreach (var VARIABLE in CPUsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!cpuB)
                {
                    cpu = VARIABLE;
                    _myBuild.Add(cpu);
                }
                if (cpuB)
                {
                    _myBuild.Remove(cpu);
                    cpu = VARIABLE;
                    _myBuild.Add(cpu);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));
                Sort(VARIABLE);
                cpuB = true;
            
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
    }

    public async Task AddGPU(int id)
    {
        foreach (var VARIABLE in GPUsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!gpuB)
                {
                    gpu = VARIABLE;
                    _myBuild.Add(gpu);
                }
                if (gpuB)
                {
                    _myBuild.Remove(gpu);
                    gpu = VARIABLE;
                    _myBuild.Add(gpu);
                }
                Console.WriteLine(id);
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));
                Sort(VARIABLE);
                gpuB = true;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
    }

    public async Task AddRAM(int id)
    {
        foreach (var VARIABLE in RAMsToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!ramB)
                {
                    ram = VARIABLE;
                    _myBuild.Add(ram);
                }
                if (ramB)
                {
                    _myBuild.Remove(ram);
                    ram = VARIABLE;
                    _myBuild.Add(ram);
                }
                Sort(VARIABLE);
                ramB = true;
                Console.WriteLine(id);
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
      
    }

    public async Task AddStorage(int id)
    {
        foreach (var VARIABLE in storagesToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!storageB)
                {
                    storage = VARIABLE;
                    _myBuild.Add(storage);
                }

                if (storageB)
                {
                    _myBuild.Remove(storage);
                    storage = VARIABLE;
                    _myBuild.Add(storage);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));

                Sort(VARIABLE);
                storageB = true;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
    }

    public async Task AddSupply(int id)
    {
        foreach (var VARIABLE in suppliesToShow)
        {
            if (VARIABLE.Id == id)
            {
                if (!supplyB)
                {
                    powerSupply = VARIABLE;
                    _myBuild.Add(powerSupply);
                }

                if (supplyB)
                {
                    _myBuild.Remove(powerSupply);
                    powerSupply = VARIABLE;
                    _myBuild.Add(powerSupply);
                }
                await JsRuntime.InvokeVoidAsync("makeGreen", String.Concat(id));

                Sort(VARIABLE);
                supplyB = true;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("makeBlack", String.Concat(VARIABLE.Id));
            }
        }
    }

    public async Task FinishBuild()
    {
        int sum = 0;
        foreach (var VARIABLE in _myBuild)
        {
            sum += VARIABLE.EnergyConsumption;
        }
        if (sum > powerSupply.EnergyConsumption)
            await JsRuntime.InvokeVoidAsync("sendAlert");
        await JsRuntime.InvokeVoidAsync("show");
    }
    
    private void Sort(Component component)
    {
        motherBoardsToShow = new List<Component>();
        CPUsToShow = new List<Component>();
        GPUsToShow = new List<Component>();
        RAMsToShow = new List<Component>();
        suppliesToShow = new List<Component>();
        storagesToShow = new List<Component>();
        
        string typeOfComponent = component.SocketType;
        
        foreach (var motherBoard in _motherBoards.ToList())
        {
            if (motherBoard.SocketType.Contains(typeOfComponent))
            {
                if(!motherBoardsToShow.Contains(motherBoard))
                motherBoardsToShow.Add(motherBoard);
            }
        }
        
        foreach (var GPU in GPUs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(GPU.SocketType))
                {
                    if(!GPUsToShow.Contains(GPU))
                    GPUsToShow.Add(GPU);
                }
            }
        }
        
        foreach (var RAM in RAMs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(RAM.SocketType))
                {
                    if(!RAMsToShow.Contains(RAM))
                    RAMsToShow.Add(RAM);
                }
            }
        }
        
        foreach (var storage in storages.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(storage.SocketType))
                {
                    if(!storagesToShow.Contains(storage))
                    storagesToShow.Add(storage);
                }
            }
        }
        
        foreach (var CPU in CPUs.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(CPU.SocketType))
                {
                    if(!CPUsToShow.Contains(CPU))
                    CPUsToShow.Add(CPU);
                }
            }
        }
        foreach (var supply in supplies.ToList())
        {
            foreach (var motherBoard in motherBoardsToShow)
            {
                if (motherBoard.SocketType.Contains(supply.SocketType))
                {
                    if(!suppliesToShow.Contains(supply))
                    suppliesToShow.Add(supply);
                }
            }
        }
     }


}