@page "/MyPage"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Data.ForumService
@using LuckyBlazor.Model.Forum
@using LuckyBlazor.Model.Rating
@using System.Reflection.Metadata
@using Microsoft.Extensions.Configuration
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IForumService ForumService
@inject IJSRuntime JsRuntime
<AuthorizeView>
    <Authorized>
        <div class="container-fluid">
            <div class="row" id="rowMain">
                <div class="col-3" id="myPageUser">
                    <h3>@String.Concat("@")@myUsername</h3>
                </div>
                <div class="col-3 justify-content-center align-content-center" id="myPageUser">
                    <button class="myPageButtons" @onclick="GoToEditProfile">Edit profile</button>
                    <button class="myPageButtons" @onclick="@(() => GoToSavedPosts())">Saved posts</button>
                </div>
            </div>

            @* <button class="buttons" @onclick="GoToMyBuilds">My Builds</button> *@
            @* <div class="container-fluid"> *@
            @foreach (var variable in _posts)
            {
                <div class="forumForm">
                <div class="row">
                    <div class="col-2">
                        @String.Concat("@")@variable.Username
                        <button class="forumButtons" id="background" @onclick="@(() => deletePost(variable.PostId))">
                            <i class="oi oi-trash" style="color: #555555"></i>
                        </button>
                    </div>
                    <div class="col-2 ml-auto">


                        <!-- Trigger/Open The Modal -->
                        <button id="myBtn" @onclick="ClickButton">Edit post...</button>

                        <!-- The Modal -->
                        <div id="myModal" class="modal">

                            <!-- Modal content -->
                            <div class="modal-content">
                                <span class="close" @onclick="ClickSpan">&times;</span>
                                <label style="display: none">@openContent(@variable.PostId)</label>
                                <input id="postContent" type="text" placeholder="Post something..." @bind-value="_editContent">
                                <button type="button" @onclick="@(() => editPost(_editContent, @variable.PostId))" class="loginButtons">Create</button>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="row" id="comments">
                    <div class="col-12" style="text-align: justify">
                        <p>@variable.Content</p>
                    </div>
                </div>
                    <div class="row" id="seeComments">
                        <div class="col-4">
                            <a href="" @onclick="@(() => GoToPostPage(variable.PostId))">See comments</a>
                        </div>
                    </div>
                    </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private Account _account = new Account();
    private IList<Post> _posts = new List<Post>();
    private string myUsername;
    private string _editContent;
    private IList<RatingPost> _rating = new List<RatingPost>();
    private int _likes = 0;

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        myUsername = _account.Username;
        userId = String.Concat(_account.UserId);

        Console.WriteLine(_account.Username);


        _posts = await ForumService.GetPostsByUserId(_account.UserId);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        }
    }
    private void GoToEditProfile()
    {
        NavigationManager.NavigateTo("/EditProfile/" + _account.UserId);
    }

    private void GoToMyBuilds()
    {
        NavigationManager.NavigateTo("/MyBuilds");
    }

    private void GoToPostPage(int postId)
    {
        Id = String.Concat(postId);
        NavigationManager.NavigateTo("/PostPage/" + Id);
    }

    private void GoToSavedPosts()
    {
        NavigationManager.NavigateTo("/SavedPosts");
    }

    private async Task deletePost(int postId)
    {
        await ForumService.DeletePost(postId);
        foreach (var VARIABLE in _posts)
        {
            if (VARIABLE.PostId == postId)
            {
                _posts.Remove(VARIABLE);
                break;
            }
        }
    }

    private async Task editPost(string content, int id)
    {
        Post post = new Post();
        foreach (var VARIABLE in _posts)
        {
            if (VARIABLE.PostId == id)
            {
                post = VARIABLE;
                break;
            }
        }
        post.Content = content;
        await ForumService.EditPost(post);
        _editContent = "";
    }

    private int getLikes(int postId)
    {
        int sum = 0;
        foreach (var VARIABLE in _posts)
        {
            if (VARIABLE.PostId == postId)
            {
                _rating = VARIABLE.RatingPosts;
                foreach (var variable in _rating)
                {
                    sum += variable.score;
                }
            }
        }
        _likes = sum;
        return _likes;
    }

    private String openContent(int id)
    {
        foreach (var VARIABLE in _posts)
        {
            if (VARIABLE.PostId == id)
            {
                _editContent = VARIABLE.Content;
                break;
            }
        }
        return _editContent;
    }
    private async Task ClickButton()
    {
        await JsRuntime.InvokeVoidAsync("clickButton");
    }

    private async Task ClickSpan()
    {
        await JsRuntime.InvokeVoidAsync("clickSpan");
    }
}