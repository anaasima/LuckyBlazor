@page "/ViewComponents"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Model.Rating
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IBuildService BuildService
@inject IComponentService ComponentService
@inject IJSRuntime JsRuntime
@if (_components == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_components.Any())
{
    <p>
        <em>No components in the list.</em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-2">
                <button class="components" @onclick="ShowMotherboards"><b>See motherboards</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="ShowCpu"><b>See CPUs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="ShowGpu"><b>See GPUs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="ShowRam"><b>See RAMs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="ShowSupply"><b>See power supplies</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="ShowStorage"><b>See storages</b></button>
            </div>
        </div>
        <div class="row">
                    <div class="col-12">
                        @* <center><h3>Predefined builds</h3></center> *@
                    </div>
                </div>
        <div class="row">
            <div class="col-12">
                <table class="table styledTable">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Brand</th>
                        <th>Type</th>
                        <th>Release Year</th>
                        <th>Aditional Information</th>
                        <th>People's opinion</th>
                        <AuthorizeView><th>Rate</th></AuthorizeView>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in _componentsToShow)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Brand</td>
                            <td>@item.Type</td>
                            <td>@item.ReleaseYear</td>
                            <td>@item.AdditionalInformation</td>
                            <td>
                                <label>@AverageStarRatingComponents(item.Id)</label>
                            </td>
                            <AuthorizeView>
                            <td>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateComponent(item.Id, 1))">
                                    1
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateComponent(item.Id, 2))">
                                    2
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateComponent(item.Id, 3))">
                                    3
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateComponent(item.Id, 4))">
                                    4
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateComponent(item.Id, 5))">
                                    5
                                </button>
                            </td>
                            </AuthorizeView>

                        </tr>
                    }
                    </tbody>
                </table>

            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <center><h3>Predefined builds</h3></center>
            </div>
        </div>
        @foreach (var variable in _preBuilds)
        {
            <div class="row">
                <div class="col-12">
                    <label><b>@variable.Name</b></label>
                    <br>
                    <label>People's opinion: @AverageStarRatingBuilds(variable.Id) stars out of 5</label>
                    <br>
                    <AuthorizeView>
                        <label style="font-size: 22px;">How do you rate it?</label>
                        <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateBuild(variable.Id, 1))">
                            1
                        </button>
                        <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateBuild(variable.Id, 2))">
                            2
                        </button>
        
                        <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateBuild(variable.Id, 3))">
                            3
                        </button>
        
                        <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateBuild(variable.Id, 4))">
                            4
                        </button>
                        <button class="btn btn-primary" id="rateBut" @onclick="@(() => RateBuild(variable.Id, 5))">
                            5
                        </button>
                    </AuthorizeView>
                    <table class="table styledTable">
                        <thead>
                        <tr>
                            <th>Type</th>
                            <th>Brand</th>
                            <th>Name</th>
                            <th>Release Year</th>
                            <th>Aditional Information</th>
                        </tr>
                        </thead>

                        <tbody>

                        @for (int i = 0; i < variable.ComponentList.Count; i++)
                        {
                            <tr>
                                <td>@variable.ComponentList[i].Type</td>
                                <td>@variable.ComponentList[i].Brand</td>
                                <td>@variable.ComponentList[i].Name</td>
                                <td>@variable.ComponentList[i].ReleaseYear</td>
                                <td>@variable.ComponentList[i].AdditionalInformation</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}







@code {
    private Account _account;
    private IList<Component> _components;
    private IList<Component> _componentsToShow; //TODO: this will later have filters
    private IList<Build> _preBuilds = new List<Build>();
    private IList<Component> _motherboards = new List<Component>();
    private IList<Component> _cpus = new List<Component>();
    private IList<Component> _rams = new List<Component>();
    private IList<Component> _gpus = new List<Component>();
    private IList<Component> _supplies = new List<Component>();
    private IList<Component> _storage = new List<Component>();
    private double _componentAverageRating = 0;
    private double _buildAverageRating = 0;

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _components = new List<Component>();
        _componentsToShow = new List<Component>();
        Account _adminAccount = new Account();
        _adminAccount = await AccountService.GetUserByUsername("ADMIN");
        _preBuilds = await BuildService.GetAllBuildsAsync(_adminAccount.UserId); //

        _components = await ComponentService.GetAllComponentsAsync();
        foreach (var VARIABLE in _components)
        {
            switch (VARIABLE.Type)
            {
                case "CPU":
                    _cpus.Add(VARIABLE);
                    break;
                case "GPU":
                    _gpus.Add(VARIABLE);
                    break;
                case "RAM":
                    _gpus.Add(VARIABLE);
                    break;
                case "Storage":
                    _storage.Add(VARIABLE);
                    break;
                case "Power supply":
                    _supplies.Add(VARIABLE);
                    break;
                case "Motherboard":
                    _motherboards.Add(VARIABLE);
                    break;
            }
        }
        _componentsToShow = _components;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        }
    }

    private async Task RateComponent(int componentId, int score)
    {
        RatingComponent ratingComponent = new RatingComponent(componentId, _account.UserId, score);
        await ComponentService.RateComponent(ratingComponent);
        AverageStarRatingComponents(componentId);
    }

    private async Task RateBuild(int buildId, int score)
    {
        RatingBuild ratingBuild = new RatingBuild(buildId, _account.UserId, score);
        await BuildService.LeaveRating(ratingBuild);
        AverageStarRatingBuilds(buildId);
    }

    private double AverageStarRatingComponents(int componentId)
    {
        Component component = new Component();
        foreach (var VARIABLE in _components)
        {
            if (VARIABLE.Id == componentId)
            {
                component = VARIABLE;
                break;
            }
        }
        _componentAverageRating = component.AverageRating();
        if (!(_componentAverageRating >= 0))
        {
            _componentAverageRating = 0;
        }
        return _componentAverageRating;
    }

    private double AverageStarRatingBuilds(int buildId)
    {
        Build component = new Build();
        foreach (var VARIABLE in _preBuilds)
        {
            if (VARIABLE.Id == buildId)
            {
                component = VARIABLE;
                break;
            }
        }
        _buildAverageRating = component.AverageRating();
        if (!(_buildAverageRating >= 0))
        {
            _buildAverageRating = 0;
        }
        return _buildAverageRating;
    }

    private void ShowMotherboards()
    {
        _componentsToShow = _motherboards;
    }

    private void ShowCpu()
    {
        _componentsToShow = _cpus;
    }
    private void ShowGpu()
    {
        _componentsToShow = _gpus;
    }
    private void ShowRam()
    {
        _componentsToShow = _rams;
    }
    private void ShowStorage()
    {
        _componentsToShow = _storage;
    }
    private void ShowSupply()
    {
        _componentsToShow = _supplies;
    }
}