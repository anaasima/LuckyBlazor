@page "/ViewComponents"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Model.Rating
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IBuildService BuildService
@inject IComponentService ComponentService
@inject IJSRuntime JsRuntime
@if (_components == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_components.Any())
{
    <p>
        <em>No adults in the list. Please add some.</em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-2">
                <button class="components" @onclick="showMotherboards"><b>See motherboards</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="showCpu"><b>See CPUs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="showGpu"><b>See GPUs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="showRam"><b>See RAMs</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="showSupply"><b>See power supplies</b></button>
            </div>
            <div class="col-2">
                <button class="components" @onclick="showStorage"><b>See storages</b></button>
            </div>
        </div>
        <div class="row">
                    <div class="col-12">
                        <center><h3>Predefined builds</h3></center>
                    </div>
                </div>
        <div class="row">
            <div class="col-12">
                <table class="table styledTable">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Brand</th>
                        <th>Type</th>
                        <th>Release Year</th>
                        <th>Aditional Information</th>
                        <th>People's opinion</th>
                        <th>Rate</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in _componentsToShow)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Brand</td>
                            <td>@item.Type</td>
                            <td>@item.ReleaseYear</td>
                            <td>@item.AdditionalInformation</td>
                            <td>
                                <label>@averageStarRatingComponents(item.Id)</label>
                            </td>
                            <td>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 1))">
                                    1
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 2))">
                                    2
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 3))">
                                    3
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 4))">
                                    4
                                </button>
                                <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 5))">
                                    5
                                </button>
                            </td>

                        </tr>
                    }
                    </tbody>
                </table>

            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <center><h3>Predefined builds</h3></center>
            </div>
        </div>
        @foreach (var variable in _preBuilds)
        {
            <div class="row">
                <div class="col-12">
                    <label><b>@variable.Name</b></label>
                    <br>
                    <label>People's opinion: @averageStarRatingBuilds(variable.Id) stars out of 5</label>
                    <br>
                    <label style="font-size: 22px;">How do you rate it?</label>
                     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 1))">
                                                        1
                                                    </button>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 2))">
                                                        2
                                                    </button>
        
                                                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 3))">
                                                        3
                                                    </button>
        
                                                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 4))">
                                                        4
                                                    </button>
                                                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 5))">
                                                        5
                                                    </button>
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Type</th>
                            <th>Brand</th>
                            <th>Name</th>
                            <th>Release Year</th>
                            <th>Aditional Information</th>
                            @* <th> *@
                            @*     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 1))"> *@
                            @*         1 *@
                            @*     </button> *@
                            @* </th> *@
                            @* <th> *@
                            @*     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 2))"> *@
                            @*         2 *@
                            @*     </button> *@
                            @* </th> *@
                            @* <th> *@
                            @*     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 3))"> *@
                            @*         3 *@
                            @*     </button> *@
                            @* </th> *@
                            @* <th> *@
                            @*     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 4))"> *@
                            @*         4 *@
                            @*     </button> *@
                            @* </th> *@
                            @* <th> *@
                            @*     <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateBuild(variable.Id, 5))"> *@
                            @*         5 *@
                            @*     </button> *@
                            @* </th> *@
                        </tr>
                        </thead>

                        <tbody>

                        @for (int i = 0; i < variable.ComponentList.Count; i++)
                        {
                            <tr>
                                <td>@variable.ComponentList[i].Type</td>
                                <td>@variable.ComponentList[i].Brand</td>
                                <td>@variable.ComponentList[i].Name</td>
                                <td>@variable.ComponentList[i].ReleaseYear</td>
                                <td>@variable.ComponentList[i].AdditionalInformation</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}







@code {
    private Account _account;
    private IList<Component> _components;
    private IList<Component> _componentsToShow; //TODO: this will later have filters
    private IList<Build> _preBuilds = new List<Build>();
    private IList<Component> _motherboards = new List<Component>();
    private IList<Component> _cpus = new List<Component>();
    private IList<Component> _rams = new List<Component>();
    private IList<Component> _gpus = new List<Component>();
    private IList<Component> _supplies = new List<Component>();
    private IList<Component> _storage = new List<Component>();
    private double _componentAverageRating = 0;
    private double _buildAverageRating = 0;
    private IList<RatingComponent> _ratingComponents = new List<RatingComponent>();
    private IList<RatingBuild> _ratingBuilds = new List<RatingBuild>();

    //TODO: reminder for filters

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _components = new List<Component>();
        _componentsToShow = new List<Component>();
        _preBuilds = await BuildService.GetAllBuildsAsync(4); //

        _components = await ComponentService.GetAllComponentsAsync();
        foreach (var VARIABLE in _components)
        {
            switch (VARIABLE.Type)
            {
                case "CPU":
                    _cpus.Add(VARIABLE);
                    break;
                case "GPU":
                    _gpus.Add(VARIABLE);
                    break;
                case "RAM":
                    _gpus.Add(VARIABLE);
                    break;
                case "Storage":
                    _storage.Add(VARIABLE);
                    break;
                case "Power supply":
                    _supplies.Add(VARIABLE);
                    break;
                case "Motherboard":
                    _motherboards.Add(VARIABLE);
                    break;
            }
        }
        _componentsToShow = _components;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
    // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task rateComponent(int componentId, int score)
    {
        RatingComponent ratingComponent = new RatingComponent(componentId, _account.UserId, score);
        await ComponentService.RateComponent(ratingComponent);
        averageStarRatingComponents(componentId);
    }

    private async Task rateBuild(int buildId, int score)
    {
        RatingBuild ratingBuild = new RatingBuild(buildId, _account.UserId, score);
        await BuildService.LeaveRating(ratingBuild);
        averageStarRatingBuilds(buildId);
    }

    private double averageStarRatingComponents(int componentId)
    {
        Component component = new Component();
        foreach (var VARIABLE in _components)
        {
            if (VARIABLE.Id == componentId)
            {
                component = VARIABLE;
                break;
            }
        }
        _componentAverageRating = component.AverageRating();
        if (!(_componentAverageRating >= 0))
        {
            _componentAverageRating = 0;
        }
        return _componentAverageRating;

    // double sum = 0;
    // foreach (var VARIABLE in _components)
    // {
    //     if (VARIABLE.Id == componentId)
    //     {
    //         Console.WriteLine(VARIABLE.RatingComponents.Count);
    //         _ratingComponents = VARIABLE.RatingComponents;
    //         break;
    //     }
    // }
    // foreach (var VARIABLE in _ratingComponents)
    // {
    //     Console.WriteLine(VARIABLE.score);
    //     Console.WriteLine(VARIABLE.componentId);
    //     sum += VARIABLE.score;
    // }
    // _componentAverageRating = sum/_ratingComponents.Count;
    }

    private double averageStarRatingBuilds(int buildId)
    {
        Build component = new Build();
        foreach (var VARIABLE in _preBuilds)
        {
            if (VARIABLE.Id == buildId)
            {
                component = VARIABLE;
                break;
            }
        }
        _buildAverageRating = component.AverageRating();
        if (!(_buildAverageRating >= 0))
        {
            _buildAverageRating = 0;
        }
        return _buildAverageRating;
    }

    private void showMotherboards()
    {
        _componentsToShow = _motherboards;
    }

    private void showCpu()
    {
        _componentsToShow = _cpus;
    }
    private void showGpu()
    {
        _componentsToShow = _gpus;
    }
    private void showRam()
    {
        _componentsToShow = _rams;
    }
    private void showStorage()
    {
        _componentsToShow = _storage;
    }
    private void showSupply()
    {
        _componentsToShow = _supplies;
    }
}