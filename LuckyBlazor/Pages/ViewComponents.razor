@page "/ViewComponents"
@using LuckyBlazor.Model
@using LuckyBlazor.Authentication
@using LuckyBlazor.Model.Rating
@using System.Threading
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IBuildService BuildService
@inject IComponentService ComponentService
@if (_components == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_components.Any())
{
    <p>
        <em>No adults in the list. Please add some.</em>
    </p>
}
else
{
    <table class="table" id="styledTable">
        <thead>
        <tr>
            <th>Name</th>
            <th>Brand</th>
            <th>Type</th>
            <th>Release Year</th>
            <th>Aditional Information</th>
            <th>People's opinion</th>
            <th>Rate</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _componentsToShow)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Brand</td>
                <td>@item.Type</td>
                <td>@item.ReleaseYear</td>
                <td>@item.AdditionalInformation</td>
                <td>
                                    <label>@averageStarRatingComponents(item.Id)</label>
                                </td>
                <td>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 1))">
                        1
                    </button>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 2))">
                        2
                    </button>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 3))">
                        3
                    </button>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 4))">
                        4
                    </button>
                    <button class="btn btn-primary" id="rateBut" @onclick="@(() => rateComponent(item.Id, 5))">
                        5
                    </button>
                </td>
                
            </tr>
        }
        </tbody>
    </table>
@*     <h3>Predefined builds</h3> *@
@*     @foreach (var variable in _preBuilds) *@
@*     { *@
@*         <label> @variable.Name </label> *@
@* *@
@*         <table class="table"> *@
@*             <thead> *@
@*             <tr> *@
@*                 <th>Type</th> *@
@*                 <th>Brand</th> *@
@*                 <th>Name</th> *@
@*                 <th>Release Year</th> *@
@*                 <th>Aditional Information</th> *@
@*                 <th><button class="btn btn-primary" @onclick="@(() => rateBuild(variable.Id, 1))">1 *@
@*                                 </button></th> *@
@*                                 <th><button class="btn btn-primary" @onclick="@(() => rateBuild(variable.Id, 2))">2 *@
@*                                 </button></th> *@
@*                                 <th><button class="btn btn-primary" @onclick="@(() => rateBuild(variable.Id, 3))">3 *@
@*                                 </button></th> *@
@*                                 <th><button class="btn btn-primary" @onclick="@(() => rateBuild(variable.Id, 4))">4 *@
@*                                 </button></th> *@
@*                                 <th><button class="btn btn-primary" @onclick="@(() => rateBuild(variable.Id, 5))">5 *@
@*                                 </button></th> *@
@*                                 <th @bind-value="_buildAverageRating"></th> *@
@*             </tr> *@
@*             </thead> *@
@* *@
@*             <tbody> *@
@* *@
@*             @for (int i = 0; i < variable.ComponentList.Count; i++) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@variable.ComponentList[i].Type</td> *@
@*                     <td>@variable.ComponentList[i].Brand</td> *@
@*                     <td>@variable.ComponentList[i].Name</td> *@
@*                     <td>@variable.ComponentList[i].ReleaseYear</td> *@
@*                     <td>@variable.ComponentList[i].AdditionalInformation</td> *@
@*                 </tr> *@
@*             } *@
@*             </tbody> *@
@*         </table> *@
}







@code {
    private Account _account;
    private IList<Component> _components;
    private IList<Component> _componentsToShow; //TODO: this will later have filters
    private IList<Build> _preBuilds = new List<Build>();
    private double _componentAverageRating = 0;
    private double _buildAverageRating = 0;
    private IList<RatingComponent> _ratingComponents = new List<RatingComponent>();
    private IList<RatingBuild> _ratingBuilds = new List<RatingBuild>();

    //TODO: reminder for filters

    protected override async Task OnInitializedAsync()
    {
        _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _components = new List<Component>();
        _componentsToShow = new List<Component>();
    // _preBuilds = await BuildService.GetAllBuildsAsync(45);//TODO don't forget to put id from admin


        _components = await ComponentService.GetAllComponentsAsync();
        _componentsToShow = _components;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _account = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
            // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task rateComponent(int componentId, int score)
    {
        RatingComponent ratingComponent = new RatingComponent(componentId, _account.UserId, score);
        await ComponentService.RateComponent(ratingComponent);
        averageStarRatingComponents(componentId);
    }

    private async Task rateBuild(int buildId, int score)
    {
        RatingBuild ratingBuild = new RatingBuild(buildId, _account.UserId, score);
        await BuildService.LeaveRating(ratingBuild);
        averageStarRatingBuilds(buildId);
    }

    private double averageStarRatingComponents(int componentId)
    {
        Component component = new Component();
        foreach (var VARIABLE in _components)
        {
            if (VARIABLE.Id == componentId)
            {
                component = VARIABLE;
                break;
            }
        }
        _componentAverageRating = component.AverageRating();
        if (!(_componentAverageRating>=0))
        {
            _componentAverageRating = 0;
        }
        return _componentAverageRating;

    // double sum = 0;
    // foreach (var VARIABLE in _components)
    // {
    //     if (VARIABLE.Id == componentId)
    //     {
    //         Console.WriteLine(VARIABLE.RatingComponents.Count);
    //         _ratingComponents = VARIABLE.RatingComponents;
    //         break;
    //     }
    // }
    // foreach (var VARIABLE in _ratingComponents)
    // {
    //     Console.WriteLine(VARIABLE.score);
    //     Console.WriteLine(VARIABLE.componentId);
    //     sum += VARIABLE.score;
    // }
    // _componentAverageRating = sum/_ratingComponents.Count;
    }

    private void averageStarRatingBuilds(int buildId)
    {
        Build build = new Build();
        double sum = 0;
        foreach (var VARIABLE in _preBuilds)
        {
            if (VARIABLE.Id == buildId)
            {
                build = VARIABLE;
            }
        }
        _ratingBuilds = build.RatingBuilds;
        foreach (var VARIABLE in _ratingBuilds)
        {
            sum += VARIABLE.score;
        }
        _buildAverageRating = sum / _ratingBuilds.Count;
    }

}