@page "/"
@using LuckyBlazor.Authentication
@using LuckyBlazor.Model

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<h1>Hello, world!</h1>
<AuthorizeView>
    <NotAuthorized>
        <div class="loginForm">
            <input type="text" placeholder="Username" @bind-value="_username">
        	<br>
            <input type="password" placeholder="Password" @bind-value="_password">
            <br>
            <div style="color:red">@_errorMessage</div>
            <br>
            <input type="submit" value="Login" @onclick="PerformLogin">
            <br>
            <div>
            <a href="" @onclick="GoToRegisterPage">Don't have an account? Click here to register!
            </a>
            <br>
            <a href="" @onclick="GoToViewComponents">Continue as guest
            </a>
            </div>
            </div>
        @* <div class="form-group"> *@
        @*     <label>User name:</label> *@
        @*     <input type="text" placeholder="user name" @bind-value="_username"/> *@
        @* </div> *@
        @* <div class="form-group"> *@
        @*     <label>Password</label> *@
        @*     <input type="password" placeholder="password" @bind-value="_password"/> *@
        @* </div> *@
        @* <div style="color:red">@_errorMessage</div> *@
        @* *@
        @* <a href="" @onclick="PerformLogin"> *@
        @*     Login *@
        @* </a> *@
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">
            Log out
        </a>
    </Authorized>
</AuthorizeView>

@code
{
    private string _username;
    private string _password;
    private string _errorMessage;

    [Parameter]
    public static int UserId { get; set; } //TODO: si aici a zis ana ca nu stie daca "merge cu staticu asta"

    private async Task PerformLogin()
    {
        _errorMessage = "";
         try
         {
             Account account = await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(new Account(_username, _password));
             UserId = account.UserId;
             _username = "";
             _password = "";
             NavigationManager.NavigateTo("/MyAccount/" + UserId);
         }
         catch (Exception e)
         {
             _errorMessage = e.Message;
         }
    }

    public async Task PerformLogout()
    {
        _errorMessage = "";
        _username = "";
        _password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public async Task GoToRegisterPage()
    {
        NavigationManager.NavigateTo("/RegisterAccount");
    }

    public async Task GoToViewComponents()
    {
        NavigationManager.NavigateTo("/ViewComponents");
    }
}